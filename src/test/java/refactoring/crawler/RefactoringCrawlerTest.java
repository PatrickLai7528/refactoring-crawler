/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package refactoring.crawler;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Dictionary;
import java.util.Hashtable;
import java.util.List;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import refactoring.crawler.graph.Node;
import refactoring.crawler.util.RefactoringCategory;

class RefactoringCrawlerTest {

  private static Dictionary<RefactoringCrawler.Settings, Double> settings;

  @BeforeAll
  static void setUp() {
    settings = new Hashtable<>();

    settings.put(RefactoringCrawler.Settings.T_CHANGE_METHOD_SIGNATURE, 1.0);
    settings.put(RefactoringCrawler.Settings.T_RENAME_METHOD, 1.0);
    settings.put(RefactoringCrawler.Settings.T_MOVE_METHOD, 1.0);
    settings.put(RefactoringCrawler.Settings.T_PUSH_DOWN_METHOD, 1.0);
    settings.put(RefactoringCrawler.Settings.T_PULL_UP_METHOD, 1.0);
    settings.put(RefactoringCrawler.Settings.T_RENAME_CLASS, 1.0);
  }

  @Test
  void testRenameMethod() {
    String source =
        "/*\n"
            + " * This Java source file was generated by the Gradle 'init' task.\n"
            + " */\n"
            + "package refactoring.crawler;\n"
            + "\n"
            + "public class Library {\n"
            + "\tprivate int a;\n"
            + "\tprivate int b;\n"
            + "\n"
            + "\tpublic void foo() {\n"
            + "\t\tSystem.out.println(11111);\n"
            + "\t}\n"
            + "\n"
            + "\tpublic void bar() {\n"
            + "\t\tthis.foo();\n"
            + "\t}\n"
            + "}\n";

    String newVersion =
        "/*\n"
            + " * This Java source file was generated by the Gradle 'init' task.\n"
            + " */\n"
            + "package refactoring.crawler;\n"
            + "\n"
            + "public class Library {\n"
            + "\tprivate int a;\n"
            + "\tprivate int b;\n"
            + "\n"
            + "\tpublic void foo12() {\n"
            + "\t\tSystem.out.println(11111);\n"
            + "\t}\n"
            + "\n"
            + "\tpublic void bar() {\n"
            + "\t\tthis.foo12();\n"
            + "\t}\n"
            + "}\n";

    RefactoringCrawler refactoringCrawler = new RefactoringCrawler("TEST", settings);
    refactoringCrawler.detect(source, newVersion);
    List<RefactoringCategory> categories = refactoringCrawler.getRefactoringCategories();
    assertEquals(1, categories.size());
    assertEquals("RenamedMethods", categories.get(0).getName());
    Node[] nodes = categories.get(0).getRefactoringPairs().get(0);
    assertEquals("refactoring.crawler.Library.foo", nodes[0].getFullyQualifiedName());
    assertEquals("refactoring.crawler.Library.foo12", nodes[1].getFullyQualifiedName());
  }

  @Test
  void testChangeMethodSignature() {
    String source =
        "/*\n"
            + " * This Java source file was generated by the Gradle 'init' task.\n"
            + " */\n"
            + "package refactoring.crawler;\n"
            + "\n"
            + "public class Library {\n"
            + "\tprivate int a;\n"
            + "\tprivate int b;\n"
            + "\n"
            + "\tpublic void foo() {\n"
            + "\t\tSystem.out.println(11111);\n"
            + "\t}\n"
            + "\n"
            + "\tpublic void bar() {\n"
            + "\t\tthis.foo();\n"
            + "\t}\n"
            + "}\n";

    String newVersion =
        "/*\n"
            + " * This Java source file was generated by the Gradle 'init' task.\n"
            + " */\n"
            + "package refactoring.crawler;\n"
            + "\n"
            + "public class Library {\n"
            + "\tprivate int a;\n"
            + "\tprivate int b;\n"
            + "\n"
            + "\tpublic void foo(int i) {\n"
            + "\t\tSystem.out.println(i);\n"
            + "\t}\n"
            + "\n"
            + "\tpublic void bar() {\n"
            + "\t\tthis.foo(1);\n"
            + "\t}\n"
            + "}\n";

    RefactoringCrawler refactoringCrawler = new RefactoringCrawler("TEST", settings);
    refactoringCrawler.detect(source, newVersion);
    List<RefactoringCategory> categories = refactoringCrawler.getRefactoringCategories();
    RefactoringCategory refactoringCategory = categories.get(0);
    Node[] nodes = refactoringCategory.getRefactoringPairs().get(0);
    assertEquals(1, categories.size());
    assertEquals("ChangedMethodSignatures", refactoringCategory.getName());
    assertEquals("METHOD= refactoring.crawler.Library.foo()", nodes[0].toString());
    assertEquals("METHOD= refactoring.crawler.Library.foo(int)", nodes[1].toString());
  }
}
